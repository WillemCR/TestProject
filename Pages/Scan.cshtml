@page
@model ScanModel
@{
    ViewData["Title"] = "Scan Producten";
}

<div class="container mx-auto px-4 py-8">
    <h1 class="text-4xl font-bold text-gray-800 mb-8">Scan Producten</h1>

    <div class="mb-8">
        <select id="vehicleSelect" class="block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            <option value="">Selecteer een voertuig</option>
            @foreach (var vehicleStatus in Model.VehicleStatuses)
            {
                <option value="@vehicleStatus.VehicleId" selected="@(Model.SelectedVehicle == vehicleStatus.VehicleId)">
                    @($"{vehicleStatus.VehicleId} ({vehicleStatus.ScannedProducts} / {vehicleStatus.TotalProducts})")
                </option>
            }
        </select>
    </div>

    <div class="mb-8">
        <input type="text" 
               id="barcodeInput" 
               class="block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" 
               placeholder="Scan barcode..." 
               autocomplete="off"
               autofocus />
    </div>

    @if (!string.IsNullOrEmpty(Model.SelectedVehicle))
    {
        <div class="mb-8">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Voertuig: @Model.SelectedVehicle</h2>
            
            @if (!Model.ShowRegularProductsMode && Model.AllHeavyOrdersScanned)
            {
                <form method="post" asp-page-handler="ShowRegularOrders" class="mb-4">
                    <input type="hidden" name="vehicle" value="@Model.SelectedVehicle" />
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                        Ga naar gewone producten
                    </button>
                </form>
            }

            @if (Model.ShowRegularProductsMode && Model.NextCustomer != null && Model.RegularOrders.All(o => o.gescand))
            {
                <form method="post" asp-page-handler="NextCustomer" class="mb-4">
                    <input type="hidden" name="vehicle" value="@Model.SelectedVehicle" />
                    <input type="hidden" name="currentCustomer" value="@Model.CurrentCustomer" />
                    <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700">
                        Volgende klant: @Model.NextCustomer
                    </button>
                </form>
            }
        </div>

        @if (Model.HeavyOrders.Any() && !Model.ShowRegularProductsMode)
        {
            <partial name="_ProductTable" model='(Title: "Zware Orders", Orders: Model.HeavyOrders, ShowCustomerName: true, LosseArtikelenPerOrder: Model.LosseArtikelenPerOrder)' />
        }
        else
        {
            <partial name="_ProductTable" model='(Title: "Reguliere Orders", Orders: Model.RegularOrders, ShowCustomerName: false, LosseArtikelenPerOrder: Model.LosseArtikelenPerOrder)' />
        }
    }
</div>

<!-- Missing product modal -->
<!-- (Keep the existing modal code unchanged) -->
<div id="missingProductModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3 text-center">
            <h3 class="text-lg leading-6 font-medium text-gray-900">Product Niet Gevonden</h3>
            <div class="mt-2 px-7 py-3">
                <p class="text-sm text-gray-500 mb-3" id="missingProductName"></p>
                <form id="reportMissingForm" method="post" action="/api/ScanApi/ReportMissing">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="reportOrderregel" name="orderregelnummer" value="" />
                    <input type="hidden" id="reportArtikel" name="artikelomschrijving" value="" />
                    <div class="mb-4">
                        <label for="reportReason" class="block text-sm font-medium text-gray-700 text-left">Reden:</label>
                        <select id="reportReason" name="reason" class="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md">
                            <option value="Niet gevonden">Niet gevonden in magazijn</option>
                            <option value="Beschadigd">Product beschadigd</option>
                            <option value="Anders">Anders</option>
                        </select>
                    </div>
                    <div class="mb-4">
                        <label for="reportComments" class="block text-sm font-medium text-gray-700 text-left">Opmerkingen:</label>
                        <textarea id="reportComments" name="comments" rows="3" class="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"></textarea>
                    </div>
                    <div class="mb-4">
                        <label for="reportAmount" class="block text-sm font-medium text-gray-700 text-left">Aantal:</label>
                        <input 
                            type="number" 
                            id="reportAmount" 
                            name="amount" 
                            class="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" 
                            min="0" 
                            step="1"
                        >
                    </div>
                    <div class="items-center px-4 py-3">
                        <button id="reportSubmitBtn" type="submit" class="px-4 py-2 bg-red-600 text-white text-base font-medium rounded-md shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500">
                            Melden
                        </button>
                        <button id="reportCancelBtn" type="button" class="ml-3 px-4 py-2 bg-gray-100 text-gray-700 text-base font-medium rounded-md shadow-sm hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-300">
                            Annuleren
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Function to show the missing product modal
        function showMissingProductModal(barcode) {
            const row = document.querySelector(`tr[data-barcode="${barcode}"]`);
            if (row) {
                const artikelomschrijving = row.cells[2].textContent;
                const orderregelnummer = row.cells[1].textContent;
                const remainingAmount = parseInt(row.querySelector('.over-cell').textContent, 10) || 0;

                // Set the values in the modal
                reportOrderregel.value = orderregelnummer;
                reportArtikel.value = artikelomschrijving;
                missingProductName.textContent = `Product: ${artikelomschrijving} (${orderregelnummer})`;

                // Set max value for amount input
                const reportAmount = document.getElementById('reportAmount');
                reportAmount.max = remainingAmount;
                reportAmount.value = remainingAmount;

                // Show the modal
                missingProductModal.classList.remove('hidden');
            }
        }
        
        // Wait for the DOM to be fully loaded before attaching event listeners
        document.addEventListener('DOMContentLoaded', function () {
            // DOM element references
            const barcodeInput = document.getElementById('barcodeInput');
            const vehicleSelect = document.getElementById('vehicleSelect');
            const missingProductModal = document.getElementById('missingProductModal');
            const reportOrderregel = document.getElementById('reportOrderregel');
            const reportArtikel = document.getElementById('reportArtikel');
            const missingProductName = document.getElementById('missingProductName');
            const reportCancelBtn = document.getElementById('reportCancelBtn');
            const reportMissingForm = document.getElementById('reportMissingForm');

            // Event Listeners

            // Handle vehicle selection
            vehicleSelect.addEventListener('change', function () {
                const selectedVehicle = this.value;
                if (selectedVehicle) {
                    window.location.href = `/Scan?vehicle=${encodeURIComponent(selectedVehicle)}`;
                } else {
                    window.location.href = '/Scan';
                }
            });

            // Handle barcode input
            barcodeInput.addEventListener('keyup', async function (event) {
                if (event.key === 'Enter') {
                    event.preventDefault();
                    const barcode = this.value.trim();

                    if (barcode.length > 0) {
                        try {
                            const result = await processBarcodeWithRetry(barcode);

                            if (result.success) {
                                const row = document.querySelector(`tr[data-barcode="${barcode}"]`);
                                if (row) {
                                    const checkbox = row.querySelector('.scanned-checkbox');
                                    const gemeldField = row.querySelector('.gemeld-cell');
                                    const totaalField = row.querySelector('.totaal-cell');
                                    const geteldField = row.querySelector('.geteld-cell');
                                    const overField = row.querySelector('.over-cell');
                                    // Update the aantal display
                                    if (geteldField) {
                                        geteldField.textContent = result.aantal;
                                    }
                                    if (overField) {
                                        const totaal = parseInt(totaalField.textContent, 10) || 0;
                                        const geteld = parseInt(geteldField.textContent, 10) || 0;
                                        const gemeld = parseInt(gemeldField.textContent, 10) || 0;
                                        let over = totaal - geteld - gemeld;
                                        if(over == 0) {
                                            overField.classList.add('text-green-500');
                                            overField.classList.remove('text-red-500');
                                        }
                                        overField.textContent = over;
                                    }
                                     checkbox.checked = result.isComplete;
                                    if (result.isComplete) {
                                        row.classList.add('bg-green-300');
                                        setTimeout(() => row.classList.remove('bg-green-300'), 2000);
                                    } else {
                                        // Turn yellow when not yet complete
                                        row.classList.add('bg-yellow-300');
                                        setTimeout(() => row.classList.remove('bg-yellow-300'), 2000);
                                    }
                                    
                                    // Check if all products for this vehicle are scanned
                                    if (result.allProductsScanned) {
                                        // Show notification that all products are scanned
                                        setTimeout(() => {
                                            alert(`Alle producten voor dit voertuig zijn gescand of gemeld!`);
                                        }, 500);
                                    }
                                    // Check if all products for current customer are scanned
                                    else if (result.allCustomerProductsScanned) {
                                        // Show notification that all products are scanned
                                        setTimeout(() => {
                                            alert(`Alle producten voor deze klant zijn gescand of gemeld!`);
                                            // Reload the page to show the next customer button
                                            window.location.reload();
                                        }, 500);
                                    }
                                } else {
                                    console.warn('Barcode niet gevonden:', barcode);
                                }
                            } else {
                                throw new Error(result.message || 'API Fout');
                            }
                        } catch (error) {
                            console.error('Error details:', error);
                            const row = document.querySelector(`tr[data-barcode="${barcode}"]`);
                            if (row) {
                                row.classList.add('bg-red-100');
                                setTimeout(() => {
                                    row.classList.remove('bg-red-100');
                                }, 500);
                            } else {
                                console.warn(`Barcode niet gevonden in lijst: ${barcode}`);
                                alert(`Barcode ${barcode} niet gevonden in de lijst voor dit voertuig.`);
                            }
                        }

                        this.value = '';
                        this.focus();
                    }
                }
            });

            // Close modal when cancel button is clicked
            reportCancelBtn.addEventListener('click', function () {
                missingProductModal.classList.add('hidden');
                barcodeInput.focus();
            });

            // Add function to handle missing product reports
            async function processMissingProductReport(formData, maxRetries = 3) {
                let attempt = 0;
                while (attempt < maxRetries) {
                    try {
                        const response = await fetch('/api/ScanApi/ReportMissing', {
                            method: 'POST',
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: formData
                        });

                        if (!response.ok) {
                            const errorText = await response.text();
                            throw new Error(`HTTP ${response.status}: ${errorText}`);
                        }

                        return await response.json();
                    } catch (error) {
                        attempt++;
                        if (attempt === maxRetries) {
                            throw error;
                        }
                        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
                    }
                }
            }

            // Update the form submission handler
            reportMissingForm.addEventListener('submit', async function (event) {
                event.preventDefault();

                const formData = new FormData(this);
                const amount = parseInt(formData.get('amount'), 10);
                const maxAmount = parseInt(document.getElementById('reportAmount').max, 10);

                if (amount > maxAmount) {
                    alert(`U kunt maximaal ${maxAmount} producten melden als ontbrekend.`);
                    return;
                }
                if (!formData.get('comments').trim()) {
                    formData.set('comments', 'Ontbrekend product gemeld');
                }

                try {
                    const result = await processMissingProductReport(formData);

                    if (result.success) {
                        // Update UI with the result
                        const row = document.querySelector(`tr[data-barcode="${reportOrderregel.value}"]`);
                        if (row) {
                            const checkbox = row.querySelector('.scanned-checkbox');
                            const gemeldField = row.querySelector('.gemeld-cell');
                            const totaalField = row.querySelector('.totaal-cell');
                            const geteldField = row.querySelector('.geteld-cell');
                            const overField = row.querySelector('.over-cell');
                            
                            if (gemeldField) {
                                gemeldField.textContent = result.aantalGemeld;
                            }
                            
                            if (overField) {
                                const totaal = parseInt(totaalField.textContent, 10);
                                const geteld = parseInt(geteldField.textContent, 10);
                                const gemeld = parseInt(gemeldField.textContent, 10);
                                overField.textContent = totaal - geteld - gemeld;
                            }
                            checkbox.checked = result.isComplete;
                            
                            // Check completion status
                            if (result.allProductsScanned) {
                                setTimeout(() => {
                                    alert(`Alle producten voor dit voertuig zijn gescand of gemeld!`);
                                }, 500);
                            } else if (result.allCustomerProductsScanned) {
                                setTimeout(() => {
                                    alert(`Alle producten voor deze klant zijn gescand of gemeld!`);
                                    window.location.reload();
                                }, 500);
                            }
                        }

                        // Close the modal
                        missingProductModal.classList.add('hidden');
                        barcodeInput.focus();
                    } else {
                        throw new Error(result.message || 'Mislukt om ontbrekend product te melden');
                    }
                } catch (error) {
                    console.error('Fout bij het melden van het ontbrekende product:', error);
                    alert('Fout bij het melden van het ontbrekende product: ' + error.message);
                }
            });

            // Add debouncing for barcode input
            const debounce = (func, wait) => {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            };

            // Improved error handling and retry logic
            async function processBarcodeWithRetry(barcode, maxRetries = 3) {
                let attempt = 0;
                while (attempt < maxRetries) {
                    try {
                        const response = await fetch('/api/ScanApi/ProcessBarcode', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: JSON.stringify({ barcode })
                        });

                        if (!response.ok) {
                            const errorText = await response.text();
                            throw new Error(`HTTP ${response.status}: ${errorText}`);
                        }

                        const result = await response.json();
                        
                        // If all heavy products are scanned, redirect to regular products mode
                        if (result.allHeavyProductsScanned) {
                            window.location.href = `/Scan?vehicle=${encodeURIComponent(vehicleSelect.value)}&mode=regular`;
                        }

                        return result;
                    } catch (error) {
                        attempt++;
                        if (attempt === maxRetries) {
                            throw error;
                        }
                        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
                    }
                }
            }

            // Improved form validation
            function validateMissingProductForm(formData) {
                const amount = parseInt(formData.get('amount'), 10);
                const maxAmount = parseInt(document.getElementById('reportAmount').max, 10);
                const comments = formData.get('comments').trim();

                if (isNaN(amount) || amount <= 0) {
                    throw new Error('Aantal moet een positief getal zijn');
                }

                if (amount > maxAmount) {
                    throw new Error(`U kunt maximaal ${maxAmount} producten melden als ontbrekend`);
                }

                if (!formData.get('reason')) {
                    throw new Error('Selecteer een reden');
                }

                return true;
            }

            // Add error boundary
            window.addEventListener('error', function(event) {
                console.error('Global error:', event.error);
                alert('Er is een fout opgetreden. Vernieuw de pagina en probeer het opnieuw.');
            });
        });
    </script>
}